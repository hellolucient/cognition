generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  email          String?      @unique
  name           String?
  avatarUrl      String?
  bio            String?
  website        String?
  location       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // API keys for AI contributions (encrypted)
  encryptedOpenAIKey    String?
  encryptedAnthropicKey String?
  encryptedGoogleKey    String?

  inviteCode     String?
  invitedById    String?
  comments       Comment[]
  generatedCodes InviteCode[]
  usedInvites    InviteCode[] @relation("UsedInvites")
  threads        Thread[]
  upvotes        Upvote[]
  downvotes      Downvote[]
  pendingShares  PendingShare[]
  invitedBy      User?        @relation("UserInvites", fields: [invitedById], references: [id])
  invitees       User[]       @relation("UserInvites")
  
  // Social features
  following      Follow[]     @relation("UserFollowing")
  followers      Follow[]     @relation("UserFollowers")
  notifications  Notification[]
  sentNotifications Notification[] @relation("NotificationSender")
}

model Thread {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  authorId         String
  title            String?   // AI-generated title, editable by author
  content          String
  summary          String
  source           String?
  tags             String[]
  isContribution   Boolean   @default(false)
  parentThreadId   String?
  referencedSource String?
  referencedText   String?
  comments         Comment[]
  author           User      @relation(fields: [authorId], references: [id])
  parentThread     Thread?   @relation("ThreadContributions", fields: [parentThreadId], references: [id])
  contributions    Thread[]  @relation("ThreadContributions")
  upvotes          Upvote[]
  downvotes        Downvote[]
  notifications    Notification[]

  @@index([authorId])
  @@index([isContribution])
  @@index([createdAt])
  @@index([authorId, isContribution])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  authorId  String
  threadId  String
  author    User     @relation(fields: [authorId], references: [id])
  thread    Thread   @relation(fields: [threadId], references: [id])

  @@index([threadId])
  @@index([authorId])
}

model Upvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  threadId  String
  thread    Thread   @relation(fields: [threadId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, threadId])
  @@index([threadId])
  @@index([userId])
}

model Downvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  threadId  String
  thread    Thread   @relation(fields: [threadId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, threadId])
  @@index([threadId])
  @@index([userId])
}

model InviteCode {
  id          String    @id @default(cuid())
  code        String    @unique
  createdById String
  usedById    String?
  usedAt      DateTime?
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  createdBy   User      @relation(fields: [createdById], references: [id])
  usedBy      User?     @relation("UsedInvites", fields: [usedById], references: [id])

  @@index([code])
  @@index([createdById])
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  message   String?
  createdAt DateTime @default(now())
  notified  Boolean  @default(false)

  @@index([email])
  @@index([createdAt])
}

model PendingShare {
  id          String   @id @default(cuid())
  url         String   // AI platform share URL
  title       String?  // Optional title extracted from URL or user-provided
  platform    String?  // Detected AI platform (ChatGPT, Claude, etc.)
  userId      String
  status      String   @default("pending") // pending, completed, cancelled
  createdAt   DateTime @default(now())
  completedAt DateTime?
  notes       String?  // Optional notes from user
  
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String   // "new_post", "new_follower", etc.
  title      String
  message    String
  threadId   String?
  fromUserId String?
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread     Thread?  @relation(fields: [threadId], references: [id], onDelete: SetNull)
  fromUser   User?    @relation("NotificationSender", fields: [fromUserId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}
